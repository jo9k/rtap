/******************************************************
 * Filename: algorithmIND_DSP.h						  *
 * Description: Base class to realize algorithm 	  *
 *              components. The most easy access to   *
 * 				new algorithms is to derive from this *
 * 				class.								  *
 * copyright IND, RWTH Aachen, 2008, HK				  *
 ******************************************************/

#include "userDef.h"

#ifdef USE_UART_FOR_MIDI

//================================================
//=================================================

#ifndef _CALGORITHM_DSPMIDI_H__
#define _CALGORITHM_DSPMIDI_H__

#include "algorithmIND_DSP.h"
#include "uartMidiReceiver.h"

/*****************************************/
// Base class for algorithm components
class CalgorithmDSPMidi: public CalgorithmIND_DSP, public CuartMidiReceiver
{
    char currentValueKey;
    char currentValueVelocity;
    char currentChannel;

    int period;
    float frequency;
    float pitchBend;
    float loudness;
    float velocity;

    float oq; // open quotient
    float sq; // speed quotient
    float nq; // noise quotient

    // In general the length of the output buffer as well as the length of
    // the generated signal deverge. If now the output buffer has been filled,
    // the iterator shows to the beginning of that part of the signal, which
    // has not yet been copied into the output buffer.
    int iterator;

    bool noteOn;

    // If a key is released, the reportNoteOff method is called. To avoid a
    // clicking noise in the speaker, the rest of the period of the current
    // outputted signal should be written out.
    bool depleteBuffer;

    // If some controllers are applied, the generated signal has to be
    // recalculated. To indicate this circumstance, the below variable can
    // be set to true.
    bool recalcSignal;

    bool addNoise;

    // No note with an frequency lower than 8 hz can be generated by MIDI
    // assuming a sinusoidal signal. Only the first periodical part of a
    // signal is saved in the below buffer. Hence the maximal buffer length
    // is SAMPLERATE*T, whereas T is the cylce duration.
    // Remark; Changed buffer length from 400 bytes to 1280 bytes due to
    // lack of memory.
    DATATYPE signal[SAMPLERATE/25];

    void calculateSignal(char valueKey, char valueVelocity, char channel);

public:

    CalgorithmDSPMidi();
    void reportNoteOn(char valueKey, char valueVelocity, char channel);
    void reportNoteOff(char valueKey, char valueVelocity, char channel);
    void reportModulation(char valueModulation);
    void reportVolume(char valueVolume);
    void reportSoundControl5(char value);
    void reportSoundControl10(char value);
    void reportPitchBend(int valuePitch);
    void reportError(short errorMessage);

    bool process(DATATYPE outputBuffers[NUMBER_CHANNELS_OUTPUT][BUFFERSIZE], DATATYPE inputBuffers[NUMBER_CHANNELS_INPUT][BUFFERSIZE]);


};

#endif
#endif

